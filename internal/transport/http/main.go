package http

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"time"

	"github.com/gorilla/mux"
	httpSwagger "github.com/swaggo/http-swagger/v2"                    // http-swagger middleware
	_ "github.com/zeroidentidad/ecom-api/internal/transport/http/docs" // generated by swag cli
)

type Handler struct {
	Router  *mux.Router
	Service EcommerceService
	Server  *http.Server
}

func NewHandler(service EcommerceService) *Handler {
	h := &Handler{
		Service: service,
	}

	h.Router = mux.NewRouter()
	h.mapRoutes()
	h.Router.Use(JsonMiddleware)
	h.Router.Use(LogMiddleware)
	h.Router.Use(TimeoutMiddleware)
	h.Server = &http.Server{
		Addr:    "0.0.0.0:8081",
		Handler: h.Router,
	}

	return h
}

// @title Test ecommerce RestAPI
// @version 1.0
// @description Este es un servidor rest api de prueba.
// @contact.name zeroidentidad
// @contact.url https://zeroidentidad.github.io/chat
// @host localhost:8081
// @BasePath /
func (h *Handler) mapRoutes() {
	h.Router.HandleFunc(
		"/",
		func(w http.ResponseWriter, r *http.Request) {
			fmt.Fprintf(w, "It works!")
		},
	)

	h.Router.HandleFunc("/api/product", h.UpsertProduct).Methods(http.MethodPatch)
	h.Router.HandleFunc("/api/product/{id}", h.GetProduct).Methods(http.MethodGet)
	h.Router.HandleFunc("/api/products", h.GetProducts).Methods(http.MethodGet)
	h.Router.HandleFunc("/api/product/{id}", h.DeleteProduct).Methods(http.MethodDelete)

	h.Router.HandleFunc("/api/cart", h.PostItemCart).Methods(http.MethodPost)
	h.Router.HandleFunc("/api/cart/{userid}", h.GetItemsCart).Methods(http.MethodGet)
	h.Router.HandleFunc("/api/cart/{userid}/item/{productid}", h.DeleteItemCart).Methods(http.MethodDelete)

	// docs
	h.Router.PathPrefix("/swagger").Handler(httpSwagger.Handler(
		httpSwagger.URL("http://localhost:8081/swagger/doc.json"), // exact url API definition
		httpSwagger.DeepLinking(true),
		httpSwagger.DomID("swagger-ui"),
	)).Methods(http.MethodGet)
}

func (h *Handler) Serve() error {
	// graceful shutdown
	var errServ error
	go func() {
		if err := h.Server.ListenAndServe(); err != nil {
			log.Println(err.Error())
			errServ = err
		}
	}()

	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt)
	<-c

	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	_ = h.Server.Shutdown(ctx)

	log.Println("shutdown gracefully")

	return errServ
}
