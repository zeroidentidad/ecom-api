basePath: /
definitions:
  http.Cart:
    properties:
      productid:
        type: string
      userid:
        type: string
    type: object
  http.Product:
    properties:
      id:
        type: string
      imageurl:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  http.message:
    properties:
      message:
        type: string
    type: object
host: localhost:8081
info:
  contact:
    name: zeroidentidad
    url: https://zeroidentidad.github.io/chat
  description: This is a test rest api server.
  title: Ecommerce RestAPI
  version: "1.0"
paths:
  /api/cart:
    post:
      consumes:
      - application/json
      parameters:
      - description: Cart data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.Cart'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Cart'
      summary: Add product to cart
      tags:
      - Cart
  /api/cart/{userid}:
    get:
      parameters:
      - description: user Id
        in: path
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/http.Cart'
            type: array
      summary: List products in cart
      tags:
      - Cart
  /api/cart/{userid}/item/{productid}:
    delete:
      parameters:
      - description: user Id
        in: path
        name: userid
        required: true
        type: string
      - description: product Id
        in: path
        name: productid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.message'
      summary: Delete product in cart
      tags:
      - Cart
  /api/product:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Product data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Product'
      summary: 'Upsert: Add/modify product depending on whether it receives Id in
        body'
      tags:
      - Product
  /api/product/{id}:
    delete:
      parameters:
      - description: product Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.message'
      summary: Delete product
      tags:
      - Product
    get:
      parameters:
      - description: product Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Product'
      summary: Get a product
      tags:
      - Product
  /api/products:
    get:
      parameters:
      - description: order options
        enum:
        - ASC
        - DESC
        in: query
        name: order
        type: string
      - description: string name
        example: string
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/http.Product'
            type: array
      summary: 'List products with optional parameters: order by price, and search
        by name'
      tags:
      - Product
swagger: "2.0"
